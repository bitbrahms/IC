画出下面两个状态机的逻辑综合图，并说明两种写法的优缺点，望高手指点！！！！！
always @(posedge clk or negedge rst)
    if(!rst)
      begin
         state<=0;
        out<=4'b0000;
      end
   else
     case(state)
        0:
         begin
            state<=1;
            out<=4'b0000;
         end
       1:
         begin
            state<=0;
            out<=4'b0001;
         end
    endcase




always @(posedge clk or negedge rst)
    if(!rst)
      state<=0;
    else
    case(state)
        0:state<=1;
        1:state<=0;
    endcase
    
    always@(state)
    if(!state)
      out=4'b0000;
    else
     out=4'b0001;



前者state 和out[0]分别综合成两个触发器,其中state触发器的输入为它本身的反向。
out[0]的触发器为state的当前输入。
后者只有state一个触发器，输出直接赋值给out[0],
光靠这两段看不出它到底要考啥，估计可能是想考状态机1段，2段，3段式的优缺点。


第一个out要综合成四位的寄存器，占用资源；
第二个则比较节约了 呵呵

2段和1段相比，没有节省资源吧，还多用了寄存器了
不过肯定是提高了程序代码的可读性和维护性
我觉得这两段的输出加一步寄存会好一些，可以减少逻辑电路带来的毛刺
吴继华，王城编的《verilog设计和验证》有一章对这个讲得很详细
你可以到论坛里面去找找，好像是有电子版的



第一段代码速度上比较快，但所占资源多；第二段正好相反，只用了一个寄存器，但Timing会差点。所谓可读性，我觉得在这里没什么区别，关键还是硬件实现上的区别。


我的观点是
二段式的状态机将组合逻辑和时序逻辑分离开, 便于综合工具进行分析.
ls各位说的,只是基于这两个例子
但是题目是关于状态机的写法的优缺点
这是我的观点



